//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace dougansoftwaredevelopemnt.GEDS
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "https://geds-sage-ssc-spc-apicast-production.api.canada.ca/gapi/v2";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Return employee resources in GEDS based on parameters.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="searchValue">Value used when performing a search.</param>
        /// <param name="searchField">Identifies the field to be searched. The value must be numeric to represent the cooresponding field as shown here: 0 - surname, givenName, 1 - surname, 2 - givenName, 3 - phoneNumber, 4 - title, 5 - email, 9 - All field combinations</param>
        /// <param name="searchCriterion">Identifies the type of search. The value must be numeric to represent the cooresponding search types as shown here: 0 - begins with, 1 - ends with, 2 - contains, 3 - exact</param>
        /// <param name="searchScope">Used to specify scope of a search. Contains one of the following values: 'base' - for a base entry search (read), 'one' - for a search at the immediate organization level, 'sub' - for entire organization search</param>
        /// <param name="searchBase">Identifies the GEDS organization ID where the search is to begin. Can represent a department, branch, etc. When empty all departments are considered in search.</param>
        /// <param name="searchFilter">Identifies the type of employee resource to search. The value must be numeric to represent the cooresponding filter types as shown here: 0 - employees only, 1 - contractors only, 2 - both employees and contractors.</param>
        /// <param name="maxEntries">Determines the maximum amount of entries to be returned from the request. Cannot exceed 200.</param>
        /// <param name="pageNumber">Search results can be returned in sections called pages. If you require more results then what gets returned in the first page then you can pass the next pageNumber in your query. You can determine when there are no more pages of results when a return code of 204 is returned.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EmployeeResource>> EmployeeSearchAsync(string user_key, string searchValue, string searchField, string searchCriterion, string searchScope, string searchBase, string searchFilter, int? maxEntries, int? pageNumber, string returnOrganizationInformation)
        {
            return EmployeeSearchAsync(user_key, searchValue, searchField, searchCriterion, searchScope, searchBase, searchFilter, maxEntries, pageNumber, returnOrganizationInformation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return employee resources in GEDS based on parameters.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="searchValue">Value used when performing a search.</param>
        /// <param name="searchField">Identifies the field to be searched. The value must be numeric to represent the cooresponding field as shown here: 0 - surname, givenName, 1 - surname, 2 - givenName, 3 - phoneNumber, 4 - title, 5 - email, 9 - All field combinations</param>
        /// <param name="searchCriterion">Identifies the type of search. The value must be numeric to represent the cooresponding search types as shown here: 0 - begins with, 1 - ends with, 2 - contains, 3 - exact</param>
        /// <param name="searchScope">Used to specify scope of a search. Contains one of the following values: 'base' - for a base entry search (read), 'one' - for a search at the immediate organization level, 'sub' - for entire organization search</param>
        /// <param name="searchBase">Identifies the GEDS organization ID where the search is to begin. Can represent a department, branch, etc. When empty all departments are considered in search.</param>
        /// <param name="searchFilter">Identifies the type of employee resource to search. The value must be numeric to represent the cooresponding filter types as shown here: 0 - employees only, 1 - contractors only, 2 - both employees and contractors.</param>
        /// <param name="maxEntries">Determines the maximum amount of entries to be returned from the request. Cannot exceed 200.</param>
        /// <param name="pageNumber">Search results can be returned in sections called pages. If you require more results then what gets returned in the first page then you can pass the next pageNumber in your query. You can determine when there are no more pages of results when a return code of 204 is returned.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EmployeeResource>> EmployeeSearchAsync(string user_key, string searchValue, string searchField, string searchCriterion, string searchScope, string searchBase, string searchFilter, int? maxEntries, int? pageNumber, string returnOrganizationInformation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/employees?");
            if (searchValue != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchValue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchField != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchField") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchField, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchCriterion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchCriterion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchCriterion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchScope != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchScope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchScope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchBase != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchBase") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchBase, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchFilter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxEntries != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxEntries") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxEntries, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (returnOrganizationInformation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("returnOrganizationInformation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(returnOrganizationInformation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (user_key == null)
                        throw new System.ArgumentNullException("user_key");
                    request_.Headers.TryAddWithoutValidation("user-key", ConvertToString(user_key, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EmployeeResource>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No entries found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Unsuccessful operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Invalid X-3scale-proxy-secret-token", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Method not allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Requested media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Supplied media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return employee resource in GEDS based on ID of entry.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="id">Identifies the ID of a resource in GEDS.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EmployeeResource>> EmployeeReadAsync(string user_key, string id, string returnOrganizationInformation)
        {
            return EmployeeReadAsync(user_key, id, returnOrganizationInformation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return employee resource in GEDS based on ID of entry.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="id">Identifies the ID of a resource in GEDS.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EmployeeResource>> EmployeeReadAsync(string user_key, string id, string returnOrganizationInformation, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/employees/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (returnOrganizationInformation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("returnOrganizationInformation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(returnOrganizationInformation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (user_key == null)
                        throw new System.ArgumentNullException("user_key");
                    request_.Headers.TryAddWithoutValidation("user-key", ConvertToString(user_key, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EmployeeResource>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No entries found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Unsuccessful operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Invalid X-3scale-proxy-secret-token", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Method not allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Requested media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Supplied media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return role resources in GEDS based on parameters.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="searchValue">Value used when performing a search.</param>
        /// <param name="searchCriterion">Identifies the type of search. The value must be numeric to represent the cooresponding search types as shown here: 0 - begins with, 1 - ends with, 2 - contains, 3 - exact</param>
        /// <param name="searchScope">Used to specify scope of a search. Contains one of the following values: 'base' - for a base entry search (read), 'one' - for a search at the immediate organization level, 'sub' - for entire organization search</param>
        /// <param name="searchBase">Identifies the GEDS organization ID where the search is to begin. Can represent a department, branch, etc. When empty all departments are considered in search.</param>
        /// <param name="maxEntries">Determines the maximum amount of entries to be returned from the request. Cannot exceed 200.</param>
        /// <param name="pageNumber">Search results can be returned in sections called pages. If you require more results then what gets returned in the first page then you can pass the next pageNumber in your query. You can determine when there are no more pages of results when a return code of 204 is returned.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleResource>> RoleSearchAsync(string user_key, string searchValue, string searchCriterion, string searchScope, string searchBase, int? maxEntries, int? pageNumber, string returnOrganizationInformation)
        {
            return RoleSearchAsync(user_key, searchValue, searchCriterion, searchScope, searchBase, maxEntries, pageNumber, returnOrganizationInformation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return role resources in GEDS based on parameters.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="searchValue">Value used when performing a search.</param>
        /// <param name="searchCriterion">Identifies the type of search. The value must be numeric to represent the cooresponding search types as shown here: 0 - begins with, 1 - ends with, 2 - contains, 3 - exact</param>
        /// <param name="searchScope">Used to specify scope of a search. Contains one of the following values: 'base' - for a base entry search (read), 'one' - for a search at the immediate organization level, 'sub' - for entire organization search</param>
        /// <param name="searchBase">Identifies the GEDS organization ID where the search is to begin. Can represent a department, branch, etc. When empty all departments are considered in search.</param>
        /// <param name="maxEntries">Determines the maximum amount of entries to be returned from the request. Cannot exceed 200.</param>
        /// <param name="pageNumber">Search results can be returned in sections called pages. If you require more results then what gets returned in the first page then you can pass the next pageNumber in your query. You can determine when there are no more pages of results when a return code of 204 is returned.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleResource>> RoleSearchAsync(string user_key, string searchValue, string searchCriterion, string searchScope, string searchBase, int? maxEntries, int? pageNumber, string returnOrganizationInformation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/roles?");
            if (searchValue != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchValue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchCriterion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchCriterion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchCriterion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchScope != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchScope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchScope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchBase != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchBase") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchBase, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxEntries != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxEntries") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxEntries, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (returnOrganizationInformation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("returnOrganizationInformation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(returnOrganizationInformation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (user_key == null)
                        throw new System.ArgumentNullException("user_key");
                    request_.Headers.TryAddWithoutValidation("user-key", ConvertToString(user_key, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleResource>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No entries found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Unsuccessful operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Invalid X-3scale-proxy-secret-token", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Method not allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Requested media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Supplied media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return role resource in GEDS based on ID of entry.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="id">Identifies the ID of a resource in GEDS.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleResource>> RoleReadAsync(string user_key, string id, string returnOrganizationInformation)
        {
            return RoleReadAsync(user_key, id, returnOrganizationInformation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return role resource in GEDS based on ID of entry.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="id">Identifies the ID of a resource in GEDS.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleResource>> RoleReadAsync(string user_key, string id, string returnOrganizationInformation, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/roles/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (returnOrganizationInformation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("returnOrganizationInformation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(returnOrganizationInformation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (user_key == null)
                        throw new System.ArgumentNullException("user_key");
                    request_.Headers.TryAddWithoutValidation("user-key", ConvertToString(user_key, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleResource>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No entries found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Unsuccessful operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Invalid X-3scale-proxy-secret-token", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Method not allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Requested media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Supplied media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return title resources in GEDS based on parameters.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="searchValue">Value used when performing a search.</param>
        /// <param name="searchCriterion">Identifies the type of search. The value must be numeric to represent the cooresponding search types as shown here: 0 - begins with, 1 - ends with, 2 - contains, 3 - exact</param>
        /// <param name="searchScope">Used to specify scope of a search. Contains one of the following values: 'base' - for a base entry search (read), 'one' - for a search at the immediate organization level, 'sub' - for entire organization search</param>
        /// <param name="searchBase">Identifies the GEDS organization ID where the search is to begin. Can represent a department, branch, etc. When empty all departments are considered in search.</param>
        /// <param name="maxEntries">Determines the maximum amount of entries to be returned from the request. Cannot exceed 200.</param>
        /// <param name="pageNumber">Search results can be returned in sections called pages. If you require more results then what gets returned in the first page then you can pass the next pageNumber in your query. You can determine when there are no more pages of results when a return code of 204 is returned.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TitleResource>> TitleSearchAsync(string user_key, string searchValue, string searchCriterion, string searchScope, string searchBase, int? maxEntries, int? pageNumber, string returnOrganizationInformation)
        {
            return TitleSearchAsync(user_key, searchValue, searchCriterion, searchScope, searchBase, maxEntries, pageNumber, returnOrganizationInformation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return title resources in GEDS based on parameters.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="searchValue">Value used when performing a search.</param>
        /// <param name="searchCriterion">Identifies the type of search. The value must be numeric to represent the cooresponding search types as shown here: 0 - begins with, 1 - ends with, 2 - contains, 3 - exact</param>
        /// <param name="searchScope">Used to specify scope of a search. Contains one of the following values: 'base' - for a base entry search (read), 'one' - for a search at the immediate organization level, 'sub' - for entire organization search</param>
        /// <param name="searchBase">Identifies the GEDS organization ID where the search is to begin. Can represent a department, branch, etc. When empty all departments are considered in search.</param>
        /// <param name="maxEntries">Determines the maximum amount of entries to be returned from the request. Cannot exceed 200.</param>
        /// <param name="pageNumber">Search results can be returned in sections called pages. If you require more results then what gets returned in the first page then you can pass the next pageNumber in your query. You can determine when there are no more pages of results when a return code of 204 is returned.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TitleResource>> TitleSearchAsync(string user_key, string searchValue, string searchCriterion, string searchScope, string searchBase, int? maxEntries, int? pageNumber, string returnOrganizationInformation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/titles?");
            if (searchValue != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchValue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchCriterion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchCriterion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchCriterion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchScope != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchScope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchScope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchBase != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchBase") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchBase, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxEntries != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxEntries") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxEntries, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (returnOrganizationInformation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("returnOrganizationInformation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(returnOrganizationInformation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (user_key == null)
                        throw new System.ArgumentNullException("user_key");
                    request_.Headers.TryAddWithoutValidation("user-key", ConvertToString(user_key, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TitleResource>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No entries found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Unsuccessful operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Invalid X-3scale-proxy-secret-token", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Method not allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Requested media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Supplied media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return title resource in GEDS based on ID of entry.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="id">Identifies the ID of a resource in GEDS.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TitleResource>> TitleReadAsync(string user_key, string id, string returnOrganizationInformation)
        {
            return TitleReadAsync(user_key, id, returnOrganizationInformation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return title resource in GEDS based on ID of entry.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="id">Identifies the ID of a resource in GEDS.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TitleResource>> TitleReadAsync(string user_key, string id, string returnOrganizationInformation, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/titles/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (returnOrganizationInformation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("returnOrganizationInformation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(returnOrganizationInformation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (user_key == null)
                        throw new System.ArgumentNullException("user_key");
                    request_.Headers.TryAddWithoutValidation("user-key", ConvertToString(user_key, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TitleResource>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No entries found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Unsuccessful operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Invalid X-3scale-proxy-secret-token", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Method not allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Requested media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Supplied media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return organization resources in GEDS based on parameters.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="searchValue">Value used when performing a search.</param>
        /// <param name="searchCriterion">Identifies the type of search. The value must be numeric to represent the cooresponding search types as shown here: 0 - begins with, 1 - ends with, 2 - contains, 3 - exact</param>
        /// <param name="searchScope">Used to specify scope of a search. Contains one of the following values: 'base' - for a base entry search (read), 'one' - for a search at the immediate organization level, 'sub' - for entire organization search</param>
        /// <param name="searchBase">Identifies the GEDS organization ID where the search is to begin. Can represent a department, branch, etc. When empty all departments are considered in search.</param>
        /// <param name="maxEntries">Determines the maximum amount of entries to be returned from the request. Cannot exceed 200.</param>
        /// <param name="pageNumber">Search results can be returned in sections called pages. If you require more results then what gets returned in the first page then you can pass the next pageNumber in your query. You can determine when there are no more pages of results when a return code of 204 is returned.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationResource>> OrganizationSearchAsync(string user_key, string searchValue, string searchCriterion, string searchScope, string searchBase, int? maxEntries, int? pageNumber, string returnOrganizationInformation)
        {
            return OrganizationSearchAsync(user_key, searchValue, searchCriterion, searchScope, searchBase, maxEntries, pageNumber, returnOrganizationInformation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return organization resources in GEDS based on parameters.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="searchValue">Value used when performing a search.</param>
        /// <param name="searchCriterion">Identifies the type of search. The value must be numeric to represent the cooresponding search types as shown here: 0 - begins with, 1 - ends with, 2 - contains, 3 - exact</param>
        /// <param name="searchScope">Used to specify scope of a search. Contains one of the following values: 'base' - for a base entry search (read), 'one' - for a search at the immediate organization level, 'sub' - for entire organization search</param>
        /// <param name="searchBase">Identifies the GEDS organization ID where the search is to begin. Can represent a department, branch, etc. When empty all departments are considered in search.</param>
        /// <param name="maxEntries">Determines the maximum amount of entries to be returned from the request. Cannot exceed 200.</param>
        /// <param name="pageNumber">Search results can be returned in sections called pages. If you require more results then what gets returned in the first page then you can pass the next pageNumber in your query. You can determine when there are no more pages of results when a return code of 204 is returned.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationResource>> OrganizationSearchAsync(string user_key, string searchValue, string searchCriterion, string searchScope, string searchBase, int? maxEntries, int? pageNumber, string returnOrganizationInformation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations?");
            if (searchValue != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchValue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchCriterion != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchCriterion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchCriterion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchScope != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchScope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchScope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchBase != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchBase") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchBase, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxEntries != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxEntries") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxEntries, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (returnOrganizationInformation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("returnOrganizationInformation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(returnOrganizationInformation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (user_key == null)
                        throw new System.ArgumentNullException("user_key");
                    request_.Headers.TryAddWithoutValidation("user-key", ConvertToString(user_key, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrganizationResource>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No entries found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Unsuccessful operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Invalid X-3scale-proxy-secret-token", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Method not allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Requested media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Supplied media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return organization resource in GEDS based on ID of entry.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="id">Identifies the ID of a resource in GEDS.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationResource>> OrganizationReadAsync(string user_key, string id, string returnOrganizationInformation)
        {
            return OrganizationReadAsync(user_key, id, returnOrganizationInformation, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return organization resource in GEDS based on ID of entry.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="id">Identifies the ID of a resource in GEDS.</param>
        /// <param name="returnOrganizationInformation">Used to specify whether organizationInforamtion should be returned for each resource in a search. Contains one of the following values: 'no' - to not return organizationInformation, 'yes' - to return organizationInformation</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationResource>> OrganizationReadAsync(string user_key, string id, string returnOrganizationInformation, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (returnOrganizationInformation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("returnOrganizationInformation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(returnOrganizationInformation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (user_key == null)
                        throw new System.ArgumentNullException("user_key");
                    request_.Headers.TryAddWithoutValidation("user-key", ConvertToString(user_key, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrganizationResource>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No entries found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Unsuccessful operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Invalid X-3scale-proxy-secret-token", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Method not allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Requested media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Supplied media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return list of all department resources in GEDS.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="maxEntries">Determines the maximum amount of entries to be returned from the request. Cannot exceed 200.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DepartmentResource>> DeptBrowseListAsync(string user_key, int? maxEntries)
        {
            return DeptBrowseListAsync(user_key, maxEntries, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return list of all department resources in GEDS.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="maxEntries">Determines the maximum amount of entries to be returned from the request. Cannot exceed 200.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DepartmentResource>> DeptBrowseListAsync(string user_key, int? maxEntries, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/depts?");
            if (maxEntries != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxEntries") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxEntries, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (user_key == null)
                        throw new System.ArgumentNullException("user_key");
                    request_.Headers.TryAddWithoutValidation("user-key", ConvertToString(user_key, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DepartmentResource>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No entries found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Unsuccessful operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Invalid X-3scale-proxy-secret-token", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Method not allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Requested media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Supplied media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Return department resource in GEDS based on ID of entry.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="id">Identifies the ID of a resource in GEDS.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DepartmentResource>> DeptReadAsync(string user_key, string id)
        {
            return DeptReadAsync(user_key, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return department resource in GEDS based on ID of entry.
        /// </summary>
        /// <param name="user_key">Your API access key</param>
        /// <param name="id">Identifies the ID of a resource in GEDS.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DepartmentResource>> DeptReadAsync(string user_key, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/depts/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (user_key == null)
                        throw new System.ArgumentNullException("user_key");
                    request_.Headers.TryAddWithoutValidation("user-key", ConvertToString(user_key, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DepartmentResource>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No entries found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Unsuccessful operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Invalid X-3scale-proxy-secret-token", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Method not allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Requested media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReturnError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ReturnError>("Supplied media type not supported", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmployeeResource
    {
        /// <summary>
        /// ID of the entry within GEDS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Identifies the type of resource. The resource type can be one of the following: 0 - Employee, 1 - Contractor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResourceType { get; set; }

        /// <summary>
        /// Surname of employee
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }

        /// <summary>
        /// Given Name of employee
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GivenName { get; set; }

        /// <summary>
        /// Initial(s) of employee
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Initials { get; set; }

        /// <summary>
        /// Title of employee
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Title Title { get; set; }

        [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInformation ContactInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("addressInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressInformation AddressInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("buildingInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildingInformation BuildingInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("organizationInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganizationInformation OrganizationInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("updateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateInformation UpdateInformation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleResource
    {
        /// <summary>
        /// ID of the entry within GEDS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Role description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInformation ContactInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("addressInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressInformation AddressInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("buildingInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildingInformation BuildingInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("organizationInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganizationInformation OrganizationInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("updateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateInformation UpdateInformation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TitleResource
    {
        /// <summary>
        /// ID of the entry within GEDS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Title description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description2 Description { get; set; }

        [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInformation ContactInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("addressInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressInformation AddressInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("buildingInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildingInformation BuildingInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("organizationInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganizationInformation OrganizationInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("updateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateInformation UpdateInformation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganizationResource
    {
        /// <summary>
        /// ID of the entry within GEDS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Organization description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description3 Description { get; set; }

        /// <summary>
        /// Organization acronym
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acronym", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Acronym Acronym { get; set; }

        [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInformation ContactInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("addressInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressInformation AddressInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("organizationInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganizationInformation OrganizationInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("updateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateInformation UpdateInformation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DepartmentResource
    {
        /// <summary>
        /// ID of the entry within GEDS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Organization description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Description4 Description { get; set; }

        /// <summary>
        /// Organization acronym
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acronym", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Acronym2 Acronym { get; set; }

        [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactInformation ContactInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("addressInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressInformation AddressInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("updateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateInformation UpdateInformation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactInformation
    {
        /// <summary>
        /// Phone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Alternate phone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("altPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltPhoneNumber { get; set; }

        /// <summary>
        /// FAX number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// TDD phone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tddNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TddNumber { get; set; }

        /// <summary>
        /// Secure phone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securePhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecurePhoneNumber { get; set; }

        /// <summary>
        /// Secure FAX number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secureFaxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecureFaxNumber { get; set; }

        /// <summary>
        /// SMTP email address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressInformation
    {
        /// <summary>
        /// Street address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        /// <summary>
        /// City
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public City City { get; set; }

        /// <summary>
        /// Province
        /// </summary>
        [Newtonsoft.Json.JsonProperty("province", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Province Province { get; set; }

        /// <summary>
        /// Country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Country Country { get; set; }

        /// <summary>
        /// Postal Code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pc { get; set; }

        /// <summary>
        /// P.O. Box
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pobox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pobox Pobox { get; set; }

        /// <summary>
        /// Mail stop
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mailstop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mailstop { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildingInformation
    {
        /// <summary>
        /// Building Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("building", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Building Building { get; set; }

        /// <summary>
        /// Floor Number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("floor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Floor { get; set; }

        /// <summary>
        /// Room Number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("room", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Room { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganizationInformation
    {
        [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganizationResource Organization { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateInformation
    {
        /// <summary>
        /// Timestamp when entry was created. Format &lt;yyyy-mm-dd&gt;T&lt;hh:mm:ss&gt;Z.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreateTimestamp { get; set; }

        /// <summary>
        /// Timestamp when entry was last updated. Format &lt;yyyy-mm-dd&gt;T&lt;hh:mm:ss&gt;Z.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifyTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifyTimestamp { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnError
    {
        /// <summary>
        /// Code representing error type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnCode", Required = Newtonsoft.Json.Required.Always)]
        public int ReturnCode { get; set; }

        /// <summary>
        /// Full description of errror.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnMessage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnMessage ReturnMessage { get; set; } = new ReturnMessage();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Title
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Description
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Description2
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Description3
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Acronym
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Description4
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Acronym2
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class City
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Province
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Country
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pobox
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Building
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnMessage
    {
        [Newtonsoft.Json.JsonProperty("en", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string En { get; set; }

        [Newtonsoft.Json.JsonProperty("fr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fr { get; set; }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603